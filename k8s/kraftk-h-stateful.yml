apiVersion: v1
kind: PersistentVolume
metadata:
  name: kafka-host-pv
spec:
  capacity:
    storage: 1Gi # Adjust the storage capacity as needed
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: k-h-storage # Name of the StorageClass
  hostPath:
    path: /Users/rosered/Documents/workspace/event-driven-go/k8s/vol/persistent-k-h-volumn # The path to the directory on the host where the data should be stored
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kafka-host-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi # Request the same storage capacity as the PV
  storageClassName: k-h-storage # Match the StorageClass name
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-host-cluster
spec:
  selector:
    app: kafka-host-cluster
  ports:
  - name: internal
    port: 29092
    targetPort: 29092
  - name: controler
    port: 29093
    targetPort: 29093
  - name: jmx
    port: 7072
    targetPort: 7072
    nodePort: 30872
  - name: client
    port: 30881
    targetPort: 30881
    nodePort: 30881
  type: NodePort
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka-host
spec:
  serviceName: "kafka-host-cluster"
  selector:
    matchLabels:
      app: kafka-host-cluster
  template:
    metadata:
      labels:
        component: kafka-host-cluster
        app: kafka-host-cluster
    spec:
      containers:
      - name: kafka
        image: confluentinc/cp-kafka
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsUser: 0 
        resources:
          requests:
            memory: "16Mi"
            cpu: "0"
          limits:
            memory: 16Mi
            cpu: "0"
        ports:
        - containerPort: 30881
        - containerPort: 29092
        - containerPort: 29093
        - containerPort: 7072
        # readinessProbe:
        #   tcpSocket:
        #     port: 9092
        #   timeoutSeconds: 5
        #   periodSeconds: 5
        #   initialDelaySeconds: 45
        # livenessProbe:
        #   tcpSocket:
        #     port: 9092
        #   initialDelaySeconds: 60
        #   periodSeconds: 10
        env:
        - name: KAFKA_NODE_ID
          value: "10"
        - name: KAFKA_LISTENERS
          value: "CONTROLLER://:29093,LISTENER_CONTAINER://:29092,LISTENER_EXTERNAL://:30881"
        - name: KAFKA_CONTROLLER_LISTENER_NAMES
          value: "CONTROLLER"
        - name: KAFKA_HEAP_OPTS
          value: "-Xms512M -Xmx512M -XX:+ExitOnOutOfMemoryError"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "LISTENER_CONTAINER://kafka-host-cluster:29092,LISTENER_EXTERNAL://localhost:30881"
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: "CONTROLLER:PLAINTEXT,LISTENER_CONTAINER:PLAINTEXT,LISTENER_EXTERNAL:PLAINTEXT"
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: LISTENER_CONTAINER
        - name: KAFKA_CONTROLLER_QUORUM_VOTERS
          value: "10@kafka-host-cluster:29093,0@kafka-0-cluster:29093"
        - name: KAFKA_PROCESS_ROLES
          value: "broker,controller"
        - name: KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS
          value: "0"
        - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_LOG_DIRS
          value: "/tmp/kraft-combined-logs"
        - name: CLUSTER_ID
          value: "VE456PBZSdIPphrGgxGtaA=="

        - name: KAFKA_DEFAULT_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "1"

        # - name: KAFKA_KRAFT_MODE
        #   value: "true"
        # - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
        #   value: "false"

        - name: KAFKA_OPTS
          value: "-javaagent:/usr/share/jmx_exporter/jar/jmx_prometheus_javaagent-0.19.0.jar=7072:/usr/share/jmx_exporter/kafka-broker.yml"
        resources: {}
        volumeMounts:
          - mountPath: /var/lib/kafka/data
            name: kafka-data
          - name: kafka-jmx
            mountPath: /usr/share/jmx_exporter
          - name: javaagent
            mountPath: /usr/share/jmx_exporter/jar
      volumes:
        - name: kafka-data
          persistentVolumeClaim:
            claimName: kafka-host-pvc
        - name: kafka-jmx
          secret:
            secretName: kafka-jmx-file
        - name: javaagent
          secret:
            secretName: javaagent-file
